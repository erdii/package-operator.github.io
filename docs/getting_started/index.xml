<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Getting Started on</title><link>https://package-operator.run/docs/getting_started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://package-operator.run/docs/getting_started/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://package-operator.run/docs/getting_started/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/introduction/</guid><description>Package Operator is a Kubernetes Operator for packaging and managing a collection of arbitrary Kubernetes objects.
Helping users in installing and maintaining complex software on one or multiple clusters.
Highlights # No Surprises Ordered Installation and Removal Operating Transparency Extensible Declarative APIs Plug and Play Cheap Failures and Easy Recovery Rollout History Rollback Objectives # Security, Stability, Transparency, Extensibility
(in this order)
Security # A Kubernetes package manager is entrusted with a very high level of permissions on one or more clusters and also works with secrets as part of package configuration.</description></item><item><title>Architecture</title><link>https://package-operator.run/docs/getting_started/architecture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/architecture/</guid><description>Package Operator Manager # The main work of Package Operator is done by the Package Operator Manager. This component is run as a deployment with a single replica. It contains the controllers for (Cluster)Package, (Cluster)ObjectDeployment, and (Cluster)ObjectSet resources. It also contains a controller for (Cluster)ObjectSetPhase objects. This controller reconciles (Cluster)ObjectSetPhases with the .spec.class set to default.
Package Operator Manager also contains functionality to copy its own binary and load packages, which is discussed in the Loading Package Images Section, and functionality to allow Package Operator to bootstrap itself, which is discussed on the Installation Page.</description></item><item><title>Requirements</title><link>https://package-operator.run/docs/getting_started/requirements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/requirements/</guid><description>Kubernetes Cluster # Package Operator need a Kubernetes cluster to be deployed on. If you don&amp;rsquo;t have a cluster but still want to play around with Package Operator, there are a few choices of tools to deploy a Kubernetes cluster locally, such as minikube and kind.
kubectl # You will need the Kubernetes CLI, kubectl, to deploy and interact with Package Operator and your packages.
kubectl-package # Package Operator provides a kubectl plugin to validate, package and inspect Package Operator packages.</description></item><item><title>Installation</title><link>https://package-operator.run/docs/getting_started/installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/installation/</guid><description>Package Operator can be installed in multiple different ways. Check the latest available release at Package Operator Releases.
Via Package Operator # Package Operator is able to bootstrap and upgrade itself using a special self-bootstrap-job.
Make sure KUBECONFIG is defined and the config points at your Kubernetes cluster. Then you can deploy Package Operator to bootstrap itself:
kubectl create -f https://github.com/package-operator/package-operator/releases/latest/download/self-bootstrap-job.yaml This will not install the webhook server.
Via Mage # Clone the Package Operator repository.</description></item><item><title>API Reference</title><link>https://package-operator.run/docs/getting_started/api-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/api-reference/</guid><description>The Package Operator APIs are an extension of the Kubernetes API using CustomResourceDefinitions. These new APIs can be interacted with like any other Kubernetes object using e.g. kubectl.
APIs follow the same API versioning guidelines as the main Kubernetes project.
Versioning principles. Taken from the Kubernetes API versioning documentation:
Alpha
The version names contain alpha (for example, v1alpha1). The software may contain bugs. Enabling a feature may expose bugs. A feature may be disabled by default.</description></item><item><title>Template Reference</title><link>https://package-operator.run/docs/getting_started/template-reference/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://package-operator.run/docs/getting_started/template-reference/</guid><description>Package Operator allows for in-cluster templating of files ending in .gotmpl via the Go template engine.
Package Operator templates use the Masterminds Sprig template library to offer additional functions. PKO templates aim to be reproducible, so Sprig template functions producing non-reproducible outputs, like current date/time, random number generation, etc. are not available.
Templates Dictionaries String String Slice Integer Slice Integer Math Float Math Defaults Encoding Lists Type Conversion Cryptography Reflection Path and Files Semantic Version Templates # include # The include function executes a pre-defined template and returns it as string, so it can be piped through over functions like indent.</description></item></channel></rss>